Работа со сканнером:
public static void welcomeUserByName() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Как вас зовут?");
        String name = scanner.next();
        printCity();
        String city = scanner.next();
        System.out.println("Рад познакомиться, " + name + " из " + city + "!");
    } 

Метод проверки чётности:
public static boolean isEven(int number) {
    return number % 2 == 0;
}


Метод проверяет, является ли строка палиндромом:
public class App {
    public static boolean isPalindrome(String string) {
        var string2 = StringUtils.reverse(string);
        return string.equalsIgnoreCase(string2);
    }
}

Метод проверяет, является ли год високосным:
public class App {
    public static boolean isLeapYear(int year) {
        return year % 400 == 0 || (year % 4 == 0 && year % 10 != 0);
    }
}

Метод проверяет на капс:
public class App {
    public static String getSentenceTone(String sentence) {
        if (sentence.toUpperCase().equals(sentence)) {
            return "scream";
        }
        return "normal";
    }
}

Определение принадлежности к группы через if - else if:
public class App {
    public static String whoIsThisHouseToStarks(String group) {
        if (group.equals("Karstark") || group.equals("Tally")) {
            return "friend";
        } else if (group.equals("Lannister") || group.equals("Frey")) {
            return "enemy";
        } else {
            return "neutral";
        }
    }
}

Программа принимает на вход строку, и, если первая буква не заглавная, возвращает перевернутый вариант исходной строки. Если первая буква заглавная, то строка возвращается без изменений. Если на вход передана пустая строка, то метод возвращает пустую строку (второе условие через тернарный оператор):
import org.apache.commons.lang3.StringUtils;

public class App {
    public static String convertString(String str) {
        if (str.equals("")) {
            return "";
        } 
        return Character.isUpperCase(str.charAt(0)) ? str : StringUtils.reverse(str);
    }
}

Тема по switch-case STRING ВЫДАЁТ ПРИНИМАЕТ INT:
public class App {
    public static String getNumberExplanation(int number) {
        switch (number) {
            case 666:
                return "devil number";
            case 7:
                return "prime number";
            case 42:
                return "answer for everything";
            default:
                return null;
        }
    }
}

Метод выводит числа в обратном порядке через цикл:
public class App {
    public static void printNumbers(int firstNumber) {
        var i = firstNumber;
        while (i >= 1) {
            System.out.println(i);
            i = i - 1;
        }
        System.out.println("finished!");
    }
}

Метод перемножает числа в диапазоне:
public static int multiplyNumbersFromRange(int start, int finish) {
    var i = start;
    var multiply = 1;
    while (i <= finish) {
        multiply *= i;
        i += 1;
    }
    return multiply;
};

App.multiplyNumbersFromRange(3, 5); // 60

Метод перемножает числа в указанном диапазоне включая границы диапазона:
public class App {
    public static int multiplyNumbersFromRange(int start, int finish) {
        var i = start;
        var result = 1;

        while (i <= finish) {
          result = result * i;
          i = i + 1;
        }

        return result;
    }
}

Метод объединяет все числа из диапазона в строку:
public class App {
    public static String joinNumbersFromRange(int start, int finish) {
        var i = start;
        var result = "";

        while (i <= finish) {
            result = result + i;
            i = i + 1;
        }

        return result;
    }
}

Метод считает количество букв в слове:
public static int countChars(String str, char ch) {
    var i = 0;
    var count = 0;
    while (i < str.length()) {
        if (str.charAt(i) == ch) {
            // Считаем только подходящие символы
            count = count + 1;
        }
        // Счётчик увеличивается в любом случае
        i = i + 1;
    }

    return count;
}

Метод принимает в качестве параметра строку и возвращает количество больших символов в строке:
public static int bigLettersCount(String text) {
        var result = 0;

        for (var i = 0; i < text.length(); i++) {
            var current = text.charAt(i);
            if (Character.toUpperCase(current) == current) {
                result += 1;
            }
        }

        return result;
    }

Реализация метода, который считает количество конкретных символов в строке без учёта регистра букв:
public class App {
    public static int countChars(String str, char ch) {
        var i = 0;
        var count = 0;
        while (i < str.length()) {
            var currentChar = Character.toLowerCase(str.charAt(i));
            if (currentChar == Character.toLowerCase(ch)) {
                count = count + 1;
            }
            i = i + 1;
        }
        return count;
    }
}


Метод, принимающий на вход строку и символ, и возвращающий новую строку, в которой удалён переданный символ во всех его позициях:
public class App {
    public static String filterString(String str, char ch) {
        var i = 0;
        var result = "";
        while (i < str.length()) {
            var currentChar = str.charAt(i);
            if (currentChar != ch) {
                result += currentChar;
            }
            i += 1;
        }

        return result;
    }
}

Метод шифрует сообщения по следующему алгоритму: берёт текст и переставляет в нём каждые два подряд идущих символа. Если кол-во символов нечётное, то последний символ остаётся на своём месте: 
public class App {
    public static String encrypt(String str) {
        var result = "";
        for (var i = 0; i < str.length(); i += 2) {
            var nextSymbol = (i + 2 > str.length()) ? "" : str.substring(i + 1, i + 2);
            result = result + nextSymbol + str.charAt(i);
        }
        return result;

Метод принимает на вход строку и возвращает её копию, у которой каждый n-ный элемент переведён в верхний регистр:
public class App {
    public static String makeItFunny(String str, int n) {
        var i = 0;
        var result = "";
        while (i < str.length()) {
            var current = str.charAt(i);
            if ((i + 1) % n == 0) {
                result = result + Character.toUpperCase(current);
            } else {
                result = result + current;
            }
        i++;
    }

    return result;
}
}

Метод проверяет (с учётом регистра), содержит ли строка указанную букву:
public class App {
    public static boolean hasChar(String str, char ch) {
        var i = 0;
        while (i < str.length()) {
            if (str.charAt(i) == ch) {
                return true;
            }

            i += 1;
        }

        return false;
    }
}

____________________________________________
text.charAt(text.length() - 0); - последний символ строки
name.substring(1, name.length()) - возвращает целочисленную длинну строки
var number = Integer.parseInt("345"); - явное преобразование типов
var result = (int) 5.1; - преобразование примитивных типов
var newEmoji = emoji.replace('(', ')'); использование метода replace() в случае символов + "google".replace("go", "mo"); в случае элементов строки
System.out.println((int) (Math.random() * 10)); - рандомное число от 0 до 10
____________________________________________

____________________________________________
Куда ставить \n:
var trimmedText = text.trim();
        var result = "First: "
            + trimmedText.charAt(0)
            + "\nLast: "
            + trimmedText.charAt(trimmedText.length() - 1);
        System.out.println(result);

Ещё вариант:
        var finalText = text.trim();
        System.out.println("First: " + finalText.charAt(0) + "\nLast: " + finalText.charAt(finalText.length() - 1));
____________________________________________
